// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL") // uses connection pooling
  // directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

// Linked list of items
model Item {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  content   String
  done      Boolean  @default(false)
  icon      String?
  link      String?
  picture   String?
  order     Int      @default(0)
  children  Item[]   @relation("ItemToItem")
  parent    Item?    @relation("ItemToItem", fields: [parentId], references: [id])
  parentId  Int?
  list      List?    @relation("ListToItem", fields: [listId], references: [id])
  listId    Int?
}

model List {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  description String?
  title       String
  items       Item[]   @relation("ListToItem")
  user        User?    @relation(fields: [userId], references: [id])
  userId      Int?
  topic       Topic?   @relation(fields: [topicId], references: [id])
  topicId     Int?
  private     Boolean  @default(false)
  x           Int?
  y           Int?
}

model User {
  id             Int       @id @default(autoincrement())
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  email          String    @unique
  name           String?
  lists          List[]
  Topic          Topic[]
  hashedPassword String
  session        Session[]
}

model Topic {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String
  lists     List[]
  user      User?    @relation(fields: [userId], references: [id])
  userId    Int?
  private   Boolean  @default(false)
}

// for passwordless login
model Token {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  email     String
  token     String
  expires   DateTime
}

model Session {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expires   DateTime
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
}
